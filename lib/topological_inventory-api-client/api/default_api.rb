=begin
#Topological Inventory

#Topological Inventory

OpenAPI spec version: 0.1.0
Contact: you@your-company.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'uri'

module TopologicalInventoryApiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new Authentication
    # Creates a Authentication object
    # @param authentication Authentication attributes to create
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def create_authentication(authentication, opts = {})
      data, _status_code, _headers = create_authentication_with_http_info(authentication, opts)
      data
    end

    # Create a new Authentication
    # Creates a Authentication object
    # @param authentication Authentication attributes to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def create_authentication_with_http_info(authentication, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_authentication ...'
      end
      # verify the required parameter 'authentication' is set
      if @api_client.config.client_side_validation && authentication.nil?
        fail ArgumentError, "Missing the required parameter 'authentication' when calling DefaultApi.create_authentication"
      end
      # resource path
      local_var_path = '/authentications'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(authentication)
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_authentication\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Endpoint
    # Creates a Endpoint object
    # @param endpoint Endpoint attributes to create
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def create_endpoint(endpoint, opts = {})
      data, _status_code, _headers = create_endpoint_with_http_info(endpoint, opts)
      data
    end

    # Create a new Endpoint
    # Creates a Endpoint object
    # @param endpoint Endpoint attributes to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def create_endpoint_with_http_info(endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_endpoint ...'
      end
      # verify the required parameter 'endpoint' is set
      if @api_client.config.client_side_validation && endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint' when calling DefaultApi.create_endpoint"
      end
      # resource path
      local_var_path = '/endpoints'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(endpoint)
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Source
    # Creates a Source object
    # @param source Source attributes to create
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def create_source(source, opts = {})
      data, _status_code, _headers = create_source_with_http_info(source, opts)
      data
    end

    # Create a new Source
    # Creates a Source object
    # @param source Source attributes to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def create_source_with_http_info(source, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_source ...'
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling DefaultApi.create_source"
      end
      # resource path
      local_var_path = '/sources'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(source)
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new SourceType
    # Creates a SourceType object
    # @param source_type SourceType attributes to create
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def create_source_type(source_type, opts = {})
      data, _status_code, _headers = create_source_type_with_http_info(source_type, opts)
      data
    end

    # Create a new SourceType
    # Creates a SourceType object
    # @param source_type SourceType attributes to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def create_source_type_with_http_info(source_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_source_type ...'
      end
      # verify the required parameter 'source_type' is set
      if @api_client.config.client_side_validation && source_type.nil?
        fail ArgumentError, "Missing the required parameter 'source_type' when calling DefaultApi.create_source_type"
      end
      # resource path
      local_var_path = '/source_types'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(source_type)
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_source_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an existing Authentication
    # Deletes a Authentication object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_authentication(id, opts = {})
      delete_authentication_with_http_info(id, opts)
      nil
    end

    # Delete an existing Authentication
    # Deletes a Authentication object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_authentication_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_authentication ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.delete_authentication"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.delete_authentication, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/authentications/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_authentication\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an existing Endpoint
    # Deletes a Endpoint object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_endpoint(id, opts = {})
      delete_endpoint_with_http_info(id, opts)
      nil
    end

    # Delete an existing Endpoint
    # Deletes a Endpoint object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_endpoint_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_endpoint ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.delete_endpoint"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.delete_endpoint, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/endpoints/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an existing Source
    # Deletes a Source object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_source(id, opts = {})
      delete_source_with_http_info(id, opts)
      nil
    end

    # Delete an existing Source
    # Deletes a Source object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_source_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_source ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.delete_source"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.delete_source, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/sources/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Authentications
    # Returns an array of Authentication objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [AuthenticationsCollection]
    def list_authentications(opts = {})
      data, _status_code, _headers = list_authentications_with_http_info(opts)
      data
    end

    # List Authentications
    # Returns an array of Authentication objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(AuthenticationsCollection, Fixnum, Hash)>] AuthenticationsCollection data, response status code and response headers
    def list_authentications_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_authentications ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_authentications, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_authentications, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_authentications, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/authentications'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AuthenticationsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_authentications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Containers for ContainerGroup
    # Returns an array of Container objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ContainersCollection]
    def list_container_group_containers(id, opts = {})
      data, _status_code, _headers = list_container_group_containers_with_http_info(id, opts)
      data
    end

    # List Containers for ContainerGroup
    # Returns an array of Container objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ContainersCollection, Fixnum, Hash)>] ContainersCollection data, response status code and response headers
    def list_container_group_containers_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_container_group_containers ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_container_group_containers"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_container_group_containers, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_container_group_containers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_container_group_containers, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_container_group_containers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/container_groups/{id}/containers'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainersCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_container_group_containers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerGroups
    # Returns an array of ContainerGroup objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ContainerGroupsCollection]
    def list_container_groups(opts = {})
      data, _status_code, _headers = list_container_groups_with_http_info(opts)
      data
    end

    # List ContainerGroups
    # Returns an array of ContainerGroup objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ContainerGroupsCollection, Fixnum, Hash)>] ContainerGroupsCollection data, response status code and response headers
    def list_container_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_container_groups ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_container_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_container_groups, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_container_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/container_groups'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerGroupsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_container_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerImages
    # Returns an array of ContainerImage objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ContainerImagesCollection]
    def list_container_images(opts = {})
      data, _status_code, _headers = list_container_images_with_http_info(opts)
      data
    end

    # List ContainerImages
    # Returns an array of ContainerImage objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ContainerImagesCollection, Fixnum, Hash)>] ContainerImagesCollection data, response status code and response headers
    def list_container_images_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_container_images ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_container_images, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_container_images, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_container_images, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/container_images'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerImagesCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_container_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerGroups for ContainerNode
    # Returns an array of ContainerGroup objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ContainerGroupsCollection]
    def list_container_node_container_groups(id, opts = {})
      data, _status_code, _headers = list_container_node_container_groups_with_http_info(id, opts)
      data
    end

    # List ContainerGroups for ContainerNode
    # Returns an array of ContainerGroup objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ContainerGroupsCollection, Fixnum, Hash)>] ContainerGroupsCollection data, response status code and response headers
    def list_container_node_container_groups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_container_node_container_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_container_node_container_groups"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_container_node_container_groups, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_container_node_container_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_container_node_container_groups, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_container_node_container_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/container_nodes/{id}/container_groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerGroupsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_container_node_container_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerNodes
    # Returns an array of ContainerNode objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ContainerNodesCollection]
    def list_container_nodes(opts = {})
      data, _status_code, _headers = list_container_nodes_with_http_info(opts)
      data
    end

    # List ContainerNodes
    # Returns an array of ContainerNode objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ContainerNodesCollection, Fixnum, Hash)>] ContainerNodesCollection data, response status code and response headers
    def list_container_nodes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_container_nodes ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_container_nodes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_container_nodes, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_container_nodes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/container_nodes'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerNodesCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_container_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerGroups for ContainerProject
    # Returns an array of ContainerGroup objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ContainerGroupsCollection]
    def list_container_project_container_groups(id, opts = {})
      data, _status_code, _headers = list_container_project_container_groups_with_http_info(id, opts)
      data
    end

    # List ContainerGroups for ContainerProject
    # Returns an array of ContainerGroup objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ContainerGroupsCollection, Fixnum, Hash)>] ContainerGroupsCollection data, response status code and response headers
    def list_container_project_container_groups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_container_project_container_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_container_project_container_groups"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_container_project_container_groups, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_container_project_container_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_container_project_container_groups, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_container_project_container_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/container_projects/{id}/container_groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerGroupsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_container_project_container_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerTemplates for ContainerProject
    # Returns an array of ContainerTemplate objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ContainerTemplatesCollection]
    def list_container_project_container_templates(id, opts = {})
      data, _status_code, _headers = list_container_project_container_templates_with_http_info(id, opts)
      data
    end

    # List ContainerTemplates for ContainerProject
    # Returns an array of ContainerTemplate objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ContainerTemplatesCollection, Fixnum, Hash)>] ContainerTemplatesCollection data, response status code and response headers
    def list_container_project_container_templates_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_container_project_container_templates ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_container_project_container_templates"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_container_project_container_templates, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_container_project_container_templates, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_container_project_container_templates, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_container_project_container_templates, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/container_projects/{id}/container_templates'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerTemplatesCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_container_project_container_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerProjects
    # Returns an array of ContainerProject objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ContainerProjectsCollection]
    def list_container_projects(opts = {})
      data, _status_code, _headers = list_container_projects_with_http_info(opts)
      data
    end

    # List ContainerProjects
    # Returns an array of ContainerProject objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ContainerProjectsCollection, Fixnum, Hash)>] ContainerProjectsCollection data, response status code and response headers
    def list_container_projects_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_container_projects ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_container_projects, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_container_projects, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_container_projects, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/container_projects'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerProjectsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_container_projects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerTemplates
    # Returns an array of ContainerTemplate objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ContainerTemplatesCollection]
    def list_container_templates(opts = {})
      data, _status_code, _headers = list_container_templates_with_http_info(opts)
      data
    end

    # List ContainerTemplates
    # Returns an array of ContainerTemplate objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ContainerTemplatesCollection, Fixnum, Hash)>] ContainerTemplatesCollection data, response status code and response headers
    def list_container_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_container_templates ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_container_templates, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_container_templates, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_container_templates, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/container_templates'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerTemplatesCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_container_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Containers
    # Returns an array of Container objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ContainersCollection]
    def list_containers(opts = {})
      data, _status_code, _headers = list_containers_with_http_info(opts)
      data
    end

    # List Containers
    # Returns an array of Container objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ContainersCollection, Fixnum, Hash)>] ContainersCollection data, response status code and response headers
    def list_containers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_containers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_containers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_containers, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_containers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/containers'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainersCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_containers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Endpoints
    # Returns an array of Endpoint objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [EndpointsCollection]
    def list_endpoints(opts = {})
      data, _status_code, _headers = list_endpoints_with_http_info(opts)
      data
    end

    # List Endpoints
    # Returns an array of Endpoint objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(EndpointsCollection, Fixnum, Hash)>] EndpointsCollection data, response status code and response headers
    def list_endpoints_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_endpoints ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_endpoints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_endpoints, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_endpoints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/endpoints'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EndpointsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Flavors
    # Returns an array of Flavor objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [FlavorsCollection]
    def list_flavors(opts = {})
      data, _status_code, _headers = list_flavors_with_http_info(opts)
      data
    end

    # List Flavors
    # Returns an array of Flavor objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(FlavorsCollection, Fixnum, Hash)>] FlavorsCollection data, response status code and response headers
    def list_flavors_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_flavors ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_flavors, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_flavors, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_flavors, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/flavors'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FlavorsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_flavors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List OrchestrationStacks
    # Returns an array of OrchestrationStack objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [OrchestrationStacksCollection]
    def list_orchestration_stacks(opts = {})
      data, _status_code, _headers = list_orchestration_stacks_with_http_info(opts)
      data
    end

    # List OrchestrationStacks
    # Returns an array of OrchestrationStack objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(OrchestrationStacksCollection, Fixnum, Hash)>] OrchestrationStacksCollection data, response status code and response headers
    def list_orchestration_stacks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_orchestration_stacks ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_orchestration_stacks, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_orchestration_stacks, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_orchestration_stacks, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orchestration_stacks'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrchestrationStacksCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_orchestration_stacks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ServiceInstances
    # Returns an array of ServiceInstance objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ServiceInstancesCollection]
    def list_service_instances(opts = {})
      data, _status_code, _headers = list_service_instances_with_http_info(opts)
      data
    end

    # List ServiceInstances
    # Returns an array of ServiceInstance objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ServiceInstancesCollection, Fixnum, Hash)>] ServiceInstancesCollection data, response status code and response headers
    def list_service_instances_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_service_instances ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_service_instances, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_service_instances, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_service_instances, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/service_instances'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInstancesCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_service_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ServiceOfferingIcons
    # Returns an array of ServiceOfferingIcon objects
    # @param [Hash] opts the optional parameters
    # @return [Array<ServiceOfferingIcon>]
    def list_service_offering_icons(opts = {})
      data, _status_code, _headers = list_service_offering_icons_with_http_info(opts)
      data
    end

    # List ServiceOfferingIcons
    # Returns an array of ServiceOfferingIcon objects
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ServiceOfferingIcon>, Fixnum, Hash)>] Array<ServiceOfferingIcon> data, response status code and response headers
    def list_service_offering_icons_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_service_offering_icons ...'
      end
      # resource path
      local_var_path = '/service_offering_icons'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ServiceOfferingIcon>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_service_offering_icons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ServiceInstances for ServiceOffering
    # Returns an array of ServiceInstance objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ServiceInstancesCollection]
    def list_service_offering_service_instances(id, opts = {})
      data, _status_code, _headers = list_service_offering_service_instances_with_http_info(id, opts)
      data
    end

    # List ServiceInstances for ServiceOffering
    # Returns an array of ServiceInstance objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ServiceInstancesCollection, Fixnum, Hash)>] ServiceInstancesCollection data, response status code and response headers
    def list_service_offering_service_instances_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_service_offering_service_instances ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_service_offering_service_instances"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_service_offering_service_instances, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_service_offering_service_instances, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_service_offering_service_instances, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_service_offering_service_instances, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/service_offerings/{id}/service_instances'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInstancesCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_service_offering_service_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ServicePlans for ServiceOffering
    # Returns an array of ServicePlan objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ServicePlansCollection]
    def list_service_offering_service_plans(id, opts = {})
      data, _status_code, _headers = list_service_offering_service_plans_with_http_info(id, opts)
      data
    end

    # List ServicePlans for ServiceOffering
    # Returns an array of ServicePlan objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ServicePlansCollection, Fixnum, Hash)>] ServicePlansCollection data, response status code and response headers
    def list_service_offering_service_plans_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_service_offering_service_plans ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_service_offering_service_plans"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_service_offering_service_plans, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_service_offering_service_plans, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_service_offering_service_plans, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_service_offering_service_plans, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/service_offerings/{id}/service_plans'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServicePlansCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_service_offering_service_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ServiceOfferings
    # Returns an array of ServiceOffering objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ServiceOfferingsCollection]
    def list_service_offerings(opts = {})
      data, _status_code, _headers = list_service_offerings_with_http_info(opts)
      data
    end

    # List ServiceOfferings
    # Returns an array of ServiceOffering objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ServiceOfferingsCollection, Fixnum, Hash)>] ServiceOfferingsCollection data, response status code and response headers
    def list_service_offerings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_service_offerings ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_service_offerings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_service_offerings, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_service_offerings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/service_offerings'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceOfferingsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_service_offerings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ServiceInstances for ServicePlan
    # Returns an array of ServiceInstance objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ServiceInstancesCollection]
    def list_service_plan_service_instances(id, opts = {})
      data, _status_code, _headers = list_service_plan_service_instances_with_http_info(id, opts)
      data
    end

    # List ServiceInstances for ServicePlan
    # Returns an array of ServiceInstance objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ServiceInstancesCollection, Fixnum, Hash)>] ServiceInstancesCollection data, response status code and response headers
    def list_service_plan_service_instances_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_service_plan_service_instances ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_service_plan_service_instances"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_service_plan_service_instances, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_service_plan_service_instances, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_service_plan_service_instances, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_service_plan_service_instances, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/service_plans/{id}/service_instances'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInstancesCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_service_plan_service_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ServicePlans
    # Returns an array of ServicePlan objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ServicePlansCollection]
    def list_service_plans(opts = {})
      data, _status_code, _headers = list_service_plans_with_http_info(opts)
      data
    end

    # List ServicePlans
    # Returns an array of ServicePlan objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ServicePlansCollection, Fixnum, Hash)>] ServicePlansCollection data, response status code and response headers
    def list_service_plans_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_service_plans ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_service_plans, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_service_plans, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_service_plans, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/service_plans'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServicePlansCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_service_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerGroups for Source
    # Returns an array of ContainerGroup objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ContainerGroupsCollection]
    def list_source_container_groups(id, opts = {})
      data, _status_code, _headers = list_source_container_groups_with_http_info(id, opts)
      data
    end

    # List ContainerGroups for Source
    # Returns an array of ContainerGroup objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ContainerGroupsCollection, Fixnum, Hash)>] ContainerGroupsCollection data, response status code and response headers
    def list_source_container_groups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_container_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_container_groups"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_container_groups, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_container_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_container_groups, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_source_container_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/sources/{id}/container_groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerGroupsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_container_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerImages for Source
    # Returns an array of ContainerImage objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ContainerImagesCollection]
    def list_source_container_images(id, opts = {})
      data, _status_code, _headers = list_source_container_images_with_http_info(id, opts)
      data
    end

    # List ContainerImages for Source
    # Returns an array of ContainerImage objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ContainerImagesCollection, Fixnum, Hash)>] ContainerImagesCollection data, response status code and response headers
    def list_source_container_images_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_container_images ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_container_images"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_container_images, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_container_images, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_container_images, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_source_container_images, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/sources/{id}/container_images'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerImagesCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_container_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerNodes for Source
    # Returns an array of ContainerNode objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ContainerNodesCollection]
    def list_source_container_nodes(id, opts = {})
      data, _status_code, _headers = list_source_container_nodes_with_http_info(id, opts)
      data
    end

    # List ContainerNodes for Source
    # Returns an array of ContainerNode objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ContainerNodesCollection, Fixnum, Hash)>] ContainerNodesCollection data, response status code and response headers
    def list_source_container_nodes_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_container_nodes ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_container_nodes"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_container_nodes, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_container_nodes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_container_nodes, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_source_container_nodes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/sources/{id}/container_nodes'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerNodesCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_container_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerProjects for Source
    # Returns an array of ContainerProject objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ContainerProjectsCollection]
    def list_source_container_projects(id, opts = {})
      data, _status_code, _headers = list_source_container_projects_with_http_info(id, opts)
      data
    end

    # List ContainerProjects for Source
    # Returns an array of ContainerProject objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ContainerProjectsCollection, Fixnum, Hash)>] ContainerProjectsCollection data, response status code and response headers
    def list_source_container_projects_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_container_projects ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_container_projects"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_container_projects, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_container_projects, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_container_projects, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_source_container_projects, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/sources/{id}/container_projects'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerProjectsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_container_projects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerTemplates for Source
    # Returns an array of ContainerTemplate objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ContainerTemplatesCollection]
    def list_source_container_templates(id, opts = {})
      data, _status_code, _headers = list_source_container_templates_with_http_info(id, opts)
      data
    end

    # List ContainerTemplates for Source
    # Returns an array of ContainerTemplate objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ContainerTemplatesCollection, Fixnum, Hash)>] ContainerTemplatesCollection data, response status code and response headers
    def list_source_container_templates_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_container_templates ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_container_templates"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_container_templates, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_container_templates, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_container_templates, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_source_container_templates, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/sources/{id}/container_templates'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerTemplatesCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_container_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Containers for Source
    # Returns an array of Container objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ContainersCollection]
    def list_source_containers(id, opts = {})
      data, _status_code, _headers = list_source_containers_with_http_info(id, opts)
      data
    end

    # List Containers for Source
    # Returns an array of Container objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ContainersCollection, Fixnum, Hash)>] ContainersCollection data, response status code and response headers
    def list_source_containers_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_containers ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_containers"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_containers, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_containers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_containers, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_source_containers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/sources/{id}/containers'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainersCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_containers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Endpoints for Source
    # Returns an array of Endpoint objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [EndpointsCollection]
    def list_source_endpoints(id, opts = {})
      data, _status_code, _headers = list_source_endpoints_with_http_info(id, opts)
      data
    end

    # List Endpoints for Source
    # Returns an array of Endpoint objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(EndpointsCollection, Fixnum, Hash)>] EndpointsCollection data, response status code and response headers
    def list_source_endpoints_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_endpoints ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_endpoints"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_endpoints, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_endpoints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_endpoints, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_source_endpoints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/sources/{id}/endpoints'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EndpointsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List OrchestrationStacks for Source
    # Returns an array of OrchestrationStack objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [OrchestrationStacksCollection]
    def list_source_orchestration_stacks(id, opts = {})
      data, _status_code, _headers = list_source_orchestration_stacks_with_http_info(id, opts)
      data
    end

    # List OrchestrationStacks for Source
    # Returns an array of OrchestrationStack objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(OrchestrationStacksCollection, Fixnum, Hash)>] OrchestrationStacksCollection data, response status code and response headers
    def list_source_orchestration_stacks_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_orchestration_stacks ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_orchestration_stacks"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_orchestration_stacks, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_orchestration_stacks, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_orchestration_stacks, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_source_orchestration_stacks, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/sources/{id}/orchestration_stacks'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrchestrationStacksCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_orchestration_stacks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ServiceInstances for Source
    # Returns an array of ServiceInstance objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ServiceInstancesCollection]
    def list_source_service_instances(id, opts = {})
      data, _status_code, _headers = list_source_service_instances_with_http_info(id, opts)
      data
    end

    # List ServiceInstances for Source
    # Returns an array of ServiceInstance objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ServiceInstancesCollection, Fixnum, Hash)>] ServiceInstancesCollection data, response status code and response headers
    def list_source_service_instances_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_service_instances ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_service_instances"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_service_instances, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_service_instances, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_service_instances, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_source_service_instances, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/sources/{id}/service_instances'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInstancesCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_service_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ServiceOfferings for Source
    # Returns an array of ServiceOffering objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ServiceOfferingsCollection]
    def list_source_service_offerings(id, opts = {})
      data, _status_code, _headers = list_source_service_offerings_with_http_info(id, opts)
      data
    end

    # List ServiceOfferings for Source
    # Returns an array of ServiceOffering objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ServiceOfferingsCollection, Fixnum, Hash)>] ServiceOfferingsCollection data, response status code and response headers
    def list_source_service_offerings_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_service_offerings ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_service_offerings"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_service_offerings, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_service_offerings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_service_offerings, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_source_service_offerings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/sources/{id}/service_offerings'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceOfferingsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_service_offerings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ServicePlans for Source
    # Returns an array of ServicePlan objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [ServicePlansCollection]
    def list_source_service_plans(id, opts = {})
      data, _status_code, _headers = list_source_service_plans_with_http_info(id, opts)
      data
    end

    # List ServicePlans for Source
    # Returns an array of ServicePlan objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(ServicePlansCollection, Fixnum, Hash)>] ServicePlansCollection data, response status code and response headers
    def list_source_service_plans_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_service_plans ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_service_plans"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_service_plans, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_service_plans, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_service_plans, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_source_service_plans, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/sources/{id}/service_plans'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServicePlansCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_service_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Sources for SourceType
    # Returns an array of Source objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [SourcesCollection]
    def list_source_type_sources(id, opts = {})
      data, _status_code, _headers = list_source_type_sources_with_http_info(id, opts)
      data
    end

    # List Sources for SourceType
    # Returns an array of Source objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(SourcesCollection, Fixnum, Hash)>] SourcesCollection data, response status code and response headers
    def list_source_type_sources_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_type_sources ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_type_sources"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_type_sources, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_type_sources, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_type_sources, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_source_type_sources, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/source_types/{id}/sources'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SourcesCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_type_sources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List SourceTypes
    # Returns an array of SourceType objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [SourceTypesCollection]
    def list_source_types(opts = {})
      data, _status_code, _headers = list_source_types_with_http_info(opts)
      data
    end

    # List SourceTypes
    # Returns an array of SourceType objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(SourceTypesCollection, Fixnum, Hash)>] SourceTypesCollection data, response status code and response headers
    def list_source_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_types ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_types, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_types, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_source_types, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/source_types'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SourceTypesCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Vms for Source
    # Returns an array of Vm objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [VmsCollection]
    def list_source_vms(id, opts = {})
      data, _status_code, _headers = list_source_vms_with_http_info(id, opts)
      data
    end

    # List Vms for Source
    # Returns an array of Vm objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(VmsCollection, Fixnum, Hash)>] VmsCollection data, response status code and response headers
    def list_source_vms_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_vms ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_vms"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_vms, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_vms, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_vms, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_source_vms, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/sources/{id}/vms'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VmsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_vms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List VolumeTypes for Source
    # Returns an array of VolumeType objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [VolumeTypesCollection]
    def list_source_volume_types(id, opts = {})
      data, _status_code, _headers = list_source_volume_types_with_http_info(id, opts)
      data
    end

    # List VolumeTypes for Source
    # Returns an array of VolumeType objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(VolumeTypesCollection, Fixnum, Hash)>] VolumeTypesCollection data, response status code and response headers
    def list_source_volume_types_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_volume_types ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_volume_types"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_volume_types, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_volume_types, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_volume_types, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_source_volume_types, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/sources/{id}/volume_types'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VolumeTypesCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_volume_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Volumes for Source
    # Returns an array of Volume objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [VolumesCollection]
    def list_source_volumes(id, opts = {})
      data, _status_code, _headers = list_source_volumes_with_http_info(id, opts)
      data
    end

    # List Volumes for Source
    # Returns an array of Volume objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(VolumesCollection, Fixnum, Hash)>] VolumesCollection data, response status code and response headers
    def list_source_volumes_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_volumes ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_volumes"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_volumes, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_volumes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_source_volumes, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_source_volumes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/sources/{id}/volumes'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VolumesCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_volumes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Sources
    # Returns an array of Source objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [SourcesCollection]
    def list_sources(opts = {})
      data, _status_code, _headers = list_sources_with_http_info(opts)
      data
    end

    # List Sources
    # Returns an array of Source objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(SourcesCollection, Fixnum, Hash)>] SourcesCollection data, response status code and response headers
    def list_sources_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_sources ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_sources, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_sources, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_sources, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/sources'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SourcesCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_sources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Tags
    # Returns an array of Tag objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [TagsCollection]
    def list_tags(opts = {})
      data, _status_code, _headers = list_tags_with_http_info(opts)
      data
    end

    # List Tags
    # Returns an array of Tag objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(TagsCollection, Fixnum, Hash)>] TagsCollection data, response status code and response headers
    def list_tags_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_tags ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_tags, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_tags, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_tags, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/tags'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TagsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Tasks
    # Returns an array of Task objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [TasksCollection]
    def list_tasks(opts = {})
      data, _status_code, _headers = list_tasks_with_http_info(opts)
      data
    end

    # List Tasks
    # Returns an array of Task objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(TasksCollection, Fixnum, Hash)>] TasksCollection data, response status code and response headers
    def list_tasks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_tasks ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_tasks, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_tasks, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_tasks, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/tasks'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TasksCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_tasks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List VolumeAttachments for Vm
    # Returns an array of VolumeAttachment objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [VolumeAttachmentsCollection]
    def list_vm_volume_attachments(id, opts = {})
      data, _status_code, _headers = list_vm_volume_attachments_with_http_info(id, opts)
      data
    end

    # List VolumeAttachments for Vm
    # Returns an array of VolumeAttachment objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(VolumeAttachmentsCollection, Fixnum, Hash)>] VolumeAttachmentsCollection data, response status code and response headers
    def list_vm_volume_attachments_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_vm_volume_attachments ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_vm_volume_attachments"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_vm_volume_attachments, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_vm_volume_attachments, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_vm_volume_attachments, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_vm_volume_attachments, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/vms/{id}/volume_attachments'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VolumeAttachmentsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_vm_volume_attachments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Volumes for Vm
    # Returns an array of Volume objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [VolumesCollection]
    def list_vm_volumes(id, opts = {})
      data, _status_code, _headers = list_vm_volumes_with_http_info(id, opts)
      data
    end

    # List Volumes for Vm
    # Returns an array of Volume objects
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(VolumesCollection, Fixnum, Hash)>] VolumesCollection data, response status code and response headers
    def list_vm_volumes_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_vm_volumes ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_vm_volumes"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_vm_volumes, must conform to the pattern /^\d+$/."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_vm_volumes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_vm_volumes, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_vm_volumes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/vms/{id}/volumes'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VolumesCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_vm_volumes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Vms
    # Returns an array of Vm objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [VmsCollection]
    def list_vms(opts = {})
      data, _status_code, _headers = list_vms_with_http_info(opts)
      data
    end

    # List Vms
    # Returns an array of Vm objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(VmsCollection, Fixnum, Hash)>] VmsCollection data, response status code and response headers
    def list_vms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_vms ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_vms, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_vms, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_vms, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/vms'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VmsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_vms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List VolumeAttachments
    # Returns an array of VolumeAttachment objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [VolumeAttachmentsCollection]
    def list_volume_attachments(opts = {})
      data, _status_code, _headers = list_volume_attachments_with_http_info(opts)
      data
    end

    # List VolumeAttachments
    # Returns an array of VolumeAttachment objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(VolumeAttachmentsCollection, Fixnum, Hash)>] VolumeAttachmentsCollection data, response status code and response headers
    def list_volume_attachments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_volume_attachments ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_volume_attachments, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_volume_attachments, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_volume_attachments, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/volume_attachments'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VolumeAttachmentsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_volume_attachments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List VolumeTypes
    # Returns an array of VolumeType objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [VolumeTypesCollection]
    def list_volume_types(opts = {})
      data, _status_code, _headers = list_volume_types_with_http_info(opts)
      data
    end

    # List VolumeTypes
    # Returns an array of VolumeType objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(VolumeTypesCollection, Fixnum, Hash)>] VolumeTypesCollection data, response status code and response headers
    def list_volume_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_volume_types ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_volume_types, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_volume_types, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_volume_types, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/volume_types'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VolumeTypesCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_volume_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Volumes
    # Returns an array of Volume objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @return [VolumesCollection]
    def list_volumes(opts = {})
      data, _status_code, _headers = list_volumes_with_http_info(opts)
      data
    end

    # List Volumes
    # Returns an array of Volume objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @return [Array<(VolumesCollection, Fixnum, Hash)>] VolumesCollection data, response status code and response headers
    def list_volumes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_volumes ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_volumes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.list_volumes, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling DefaultApi.list_volumes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/volumes'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VolumesCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_volumes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Order an existing ServicePlan
    # Returns a Task id
    # @param id ID of the resource
    # @param order_parameters Order parameters defining the service and provider control
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def order_service_plan(id, order_parameters, opts = {})
      data, _status_code, _headers = order_service_plan_with_http_info(id, order_parameters, opts)
      data
    end

    # Order an existing ServicePlan
    # Returns a Task id
    # @param id ID of the resource
    # @param order_parameters Order parameters defining the service and provider control
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def order_service_plan_with_http_info(id, order_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.order_service_plan ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.order_service_plan"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.order_service_plan, must conform to the pattern /^\d+$/."
      end

      # verify the required parameter 'order_parameters' is set
      if @api_client.config.client_side_validation && order_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'order_parameters' when calling DefaultApi.order_service_plan"
      end
      # resource path
      local_var_path = '/service_plans/{id}/order'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(order_parameters)
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#order_service_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing Authentication
    # Returns a Authentication object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Authentication]
    def show_authentication(id, opts = {})
      data, _status_code, _headers = show_authentication_with_http_info(id, opts)
      data
    end

    # Show an existing Authentication
    # Returns a Authentication object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Authentication, Fixnum, Hash)>] Authentication data, response status code and response headers
    def show_authentication_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_authentication ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_authentication"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_authentication, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/authentications/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Authentication')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_authentication\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing Container
    # Returns a Container object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Container]
    def show_container(id, opts = {})
      data, _status_code, _headers = show_container_with_http_info(id, opts)
      data
    end

    # Show an existing Container
    # Returns a Container object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Container, Fixnum, Hash)>] Container data, response status code and response headers
    def show_container_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_container ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_container"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_container, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/containers/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Container')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_container\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing ContainerGroup
    # Returns a ContainerGroup object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [ContainerGroup]
    def show_container_group(id, opts = {})
      data, _status_code, _headers = show_container_group_with_http_info(id, opts)
      data
    end

    # Show an existing ContainerGroup
    # Returns a ContainerGroup object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContainerGroup, Fixnum, Hash)>] ContainerGroup data, response status code and response headers
    def show_container_group_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_container_group ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_container_group"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_container_group, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/container_groups/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_container_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing ContainerImage
    # Returns a ContainerImage object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [ContainerImage]
    def show_container_image(id, opts = {})
      data, _status_code, _headers = show_container_image_with_http_info(id, opts)
      data
    end

    # Show an existing ContainerImage
    # Returns a ContainerImage object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContainerImage, Fixnum, Hash)>] ContainerImage data, response status code and response headers
    def show_container_image_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_container_image ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_container_image"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_container_image, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/container_images/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerImage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_container_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing ContainerNode
    # Returns a ContainerNode object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [ContainerNode]
    def show_container_node(id, opts = {})
      data, _status_code, _headers = show_container_node_with_http_info(id, opts)
      data
    end

    # Show an existing ContainerNode
    # Returns a ContainerNode object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContainerNode, Fixnum, Hash)>] ContainerNode data, response status code and response headers
    def show_container_node_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_container_node ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_container_node"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_container_node, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/container_nodes/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_container_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing ContainerProject
    # Returns a ContainerProject object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [ContainerProject]
    def show_container_project(id, opts = {})
      data, _status_code, _headers = show_container_project_with_http_info(id, opts)
      data
    end

    # Show an existing ContainerProject
    # Returns a ContainerProject object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContainerProject, Fixnum, Hash)>] ContainerProject data, response status code and response headers
    def show_container_project_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_container_project ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_container_project"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_container_project, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/container_projects/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerProject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_container_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing ContainerTemplate
    # Returns a ContainerTemplate object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [ContainerTemplate]
    def show_container_template(id, opts = {})
      data, _status_code, _headers = show_container_template_with_http_info(id, opts)
      data
    end

    # Show an existing ContainerTemplate
    # Returns a ContainerTemplate object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContainerTemplate, Fixnum, Hash)>] ContainerTemplate data, response status code and response headers
    def show_container_template_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_container_template ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_container_template"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_container_template, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/container_templates/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerTemplate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_container_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing Endpoint
    # Returns a Endpoint object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Endpoint]
    def show_endpoint(id, opts = {})
      data, _status_code, _headers = show_endpoint_with_http_info(id, opts)
      data
    end

    # Show an existing Endpoint
    # Returns a Endpoint object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Endpoint, Fixnum, Hash)>] Endpoint data, response status code and response headers
    def show_endpoint_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_endpoint ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_endpoint"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_endpoint, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/endpoints/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Endpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing Flavor
    # Returns a Flavor object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Flavor]
    def show_flavor(id, opts = {})
      data, _status_code, _headers = show_flavor_with_http_info(id, opts)
      data
    end

    # Show an existing Flavor
    # Returns a Flavor object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Flavor, Fixnum, Hash)>] Flavor data, response status code and response headers
    def show_flavor_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_flavor ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_flavor"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_flavor, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/flavors/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Flavor')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_flavor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing OrchestrationStack
    # Returns a OrchestrationStack object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [OrchestrationStack]
    def show_orchestration_stack(id, opts = {})
      data, _status_code, _headers = show_orchestration_stack_with_http_info(id, opts)
      data
    end

    # Show an existing OrchestrationStack
    # Returns a OrchestrationStack object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrchestrationStack, Fixnum, Hash)>] OrchestrationStack data, response status code and response headers
    def show_orchestration_stack_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_orchestration_stack ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_orchestration_stack"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_orchestration_stack, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/orchestration_stacks/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrchestrationStack')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_orchestration_stack\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing ServiceInstance
    # Returns a ServiceInstance object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [ServiceInstance]
    def show_service_instance(id, opts = {})
      data, _status_code, _headers = show_service_instance_with_http_info(id, opts)
      data
    end

    # Show an existing ServiceInstance
    # Returns a ServiceInstance object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInstance, Fixnum, Hash)>] ServiceInstance data, response status code and response headers
    def show_service_instance_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_service_instance ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_service_instance"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_service_instance, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/service_instances/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing ServiceOffering
    # Returns a ServiceOffering object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [ServiceOffering]
    def show_service_offering(id, opts = {})
      data, _status_code, _headers = show_service_offering_with_http_info(id, opts)
      data
    end

    # Show an existing ServiceOffering
    # Returns a ServiceOffering object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceOffering, Fixnum, Hash)>] ServiceOffering data, response status code and response headers
    def show_service_offering_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_service_offering ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_service_offering"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_service_offering, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/service_offerings/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceOffering')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_service_offering\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing ServiceOfferingIcon
    # Returns a ServiceOfferingIcon object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [ServiceOfferingIcon]
    def show_service_offering_icon(id, opts = {})
      data, _status_code, _headers = show_service_offering_icon_with_http_info(id, opts)
      data
    end

    # Show an existing ServiceOfferingIcon
    # Returns a ServiceOfferingIcon object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceOfferingIcon, Fixnum, Hash)>] ServiceOfferingIcon data, response status code and response headers
    def show_service_offering_icon_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_service_offering_icon ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_service_offering_icon"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_service_offering_icon, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/service_offering_icons/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceOfferingIcon')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_service_offering_icon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing ServicePlan
    # Returns a ServicePlan object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [ServicePlan]
    def show_service_plan(id, opts = {})
      data, _status_code, _headers = show_service_plan_with_http_info(id, opts)
      data
    end

    # Show an existing ServicePlan
    # Returns a ServicePlan object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServicePlan, Fixnum, Hash)>] ServicePlan data, response status code and response headers
    def show_service_plan_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_service_plan ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_service_plan"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_service_plan, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/service_plans/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServicePlan')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_service_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing Source
    # Returns a Source object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Source]
    def show_source(id, opts = {})
      data, _status_code, _headers = show_source_with_http_info(id, opts)
      data
    end

    # Show an existing Source
    # Returns a Source object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Source, Fixnum, Hash)>] Source data, response status code and response headers
    def show_source_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_source ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_source"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_source, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/sources/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Source')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing SourceType
    # Returns a SourceType object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [SourceType]
    def show_source_type(id, opts = {})
      data, _status_code, _headers = show_source_type_with_http_info(id, opts)
      data
    end

    # Show an existing SourceType
    # Returns a SourceType object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(SourceType, Fixnum, Hash)>] SourceType data, response status code and response headers
    def show_source_type_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_source_type ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_source_type"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_source_type, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/source_types/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SourceType')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_source_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing Tag
    # Returns a Tag object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Tag]
    def show_tag(id, opts = {})
      data, _status_code, _headers = show_tag_with_http_info(id, opts)
      data
    end

    # Show an existing Tag
    # Returns a Tag object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tag, Fixnum, Hash)>] Tag data, response status code and response headers
    def show_tag_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_tag ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_tag"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_tag, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/tags/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing Task
    # Returns a Task object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Task]
    def show_task(id, opts = {})
      data, _status_code, _headers = show_task_with_http_info(id, opts)
      data
    end

    # Show an existing Task
    # Returns a Task object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Task, Fixnum, Hash)>] Task data, response status code and response headers
    def show_task_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_task ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_task"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_task, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/tasks/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Task')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing Vm
    # Returns a Vm object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Vm]
    def show_vm(id, opts = {})
      data, _status_code, _headers = show_vm_with_http_info(id, opts)
      data
    end

    # Show an existing Vm
    # Returns a Vm object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Vm, Fixnum, Hash)>] Vm data, response status code and response headers
    def show_vm_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_vm ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_vm"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_vm, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/vms/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Vm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing Volume
    # Returns a Volume object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Volume]
    def show_volume(id, opts = {})
      data, _status_code, _headers = show_volume_with_http_info(id, opts)
      data
    end

    # Show an existing Volume
    # Returns a Volume object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Volume, Fixnum, Hash)>] Volume data, response status code and response headers
    def show_volume_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_volume ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_volume"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_volume, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/volumes/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Volume')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_volume\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing VolumeAttachment
    # Returns a VolumeAttachment object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [VolumeAttachment]
    def show_volume_attachment(id, opts = {})
      data, _status_code, _headers = show_volume_attachment_with_http_info(id, opts)
      data
    end

    # Show an existing VolumeAttachment
    # Returns a VolumeAttachment object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(VolumeAttachment, Fixnum, Hash)>] VolumeAttachment data, response status code and response headers
    def show_volume_attachment_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_volume_attachment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_volume_attachment"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_volume_attachment, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/volume_attachments/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VolumeAttachment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_volume_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing VolumeType
    # Returns a VolumeType object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [VolumeType]
    def show_volume_type(id, opts = {})
      data, _status_code, _headers = show_volume_type_with_http_info(id, opts)
      data
    end

    # Show an existing VolumeType
    # Returns a VolumeType object
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(VolumeType, Fixnum, Hash)>] VolumeType data, response status code and response headers
    def show_volume_type_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_volume_type ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_volume_type"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_volume_type, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/volume_types/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VolumeType')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_volume_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing Authentication
    # Updates a Authentication object
    # @param id ID of the resource
    # @param authentication Authentication attributes to update
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_authentication(id, authentication, opts = {})
      update_authentication_with_http_info(id, authentication, opts)
      nil
    end

    # Update an existing Authentication
    # Updates a Authentication object
    # @param id ID of the resource
    # @param authentication Authentication attributes to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_authentication_with_http_info(id, authentication, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_authentication ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_authentication"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.update_authentication, must conform to the pattern /^\d+$/."
      end

      # verify the required parameter 'authentication' is set
      if @api_client.config.client_side_validation && authentication.nil?
        fail ArgumentError, "Missing the required parameter 'authentication' when calling DefaultApi.update_authentication"
      end
      # resource path
      local_var_path = '/authentications/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(authentication)
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_authentication\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing Endpoint
    # Updates a Endpoint object
    # @param id ID of the resource
    # @param endpoint Endpoint attributes to update
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_endpoint(id, endpoint, opts = {})
      update_endpoint_with_http_info(id, endpoint, opts)
      nil
    end

    # Update an existing Endpoint
    # Updates a Endpoint object
    # @param id ID of the resource
    # @param endpoint Endpoint attributes to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_endpoint_with_http_info(id, endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_endpoint ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_endpoint"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.update_endpoint, must conform to the pattern /^\d+$/."
      end

      # verify the required parameter 'endpoint' is set
      if @api_client.config.client_side_validation && endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint' when calling DefaultApi.update_endpoint"
      end
      # resource path
      local_var_path = '/endpoints/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(endpoint)
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing Source
    # Updates a Source object
    # @param id ID of the resource
    # @param source Source attributes to update
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_source(id, source, opts = {})
      update_source_with_http_info(id, source, opts)
      nil
    end

    # Update an existing Source
    # Updates a Source object
    # @param id ID of the resource
    # @param source Source attributes to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_source_with_http_info(id, source, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_source ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_source"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.update_source, must conform to the pattern /^\d+$/."
      end

      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling DefaultApi.update_source"
      end
      # resource path
      local_var_path = '/sources/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(source)
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
