=begin
#Topological Inventory

#Topological Inventory

OpenAPI spec version: 0.0.1
Contact: you@your-company.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.3

=end

require 'uri'

module TopologicalInventoryApiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new Endpoint
    # Creates a Endpoint object
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def create_endpoint(body, opts = {})
      data, _status_code, _headers = create_endpoint_with_http_info(body, opts)
      data
    end

    # Create a new Endpoint
    # Creates a Endpoint object
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def create_endpoint_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_endpoint ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.create_endpoint"
      end
      # resource path
      local_var_path = '/endpoints'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Source
    # Creates a Source object
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def create_source(body, opts = {})
      data, _status_code, _headers = create_source_with_http_info(body, opts)
      data
    end

    # Create a new Source
    # Creates a Source object
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def create_source_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_source ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.create_source"
      end
      # resource path
      local_var_path = '/sources'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new SourceType
    # Creates a SourceType object
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def create_source_type(body, opts = {})
      data, _status_code, _headers = create_source_type_with_http_info(body, opts)
      data
    end

    # Create a new SourceType
    # Creates a SourceType object
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def create_source_type_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_source_type ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.create_source_type"
      end
      # resource path
      local_var_path = '/source_types'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_source_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an existing Endpoint
    # Deletes a Endpoint object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_endpoint(id, opts = {})
      delete_endpoint_with_http_info(id, opts)
      nil
    end

    # Delete an existing Endpoint
    # Deletes a Endpoint object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_endpoint_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_endpoint ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.delete_endpoint"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.delete_endpoint, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/endpoints/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an existing Source
    # Deletes a Source object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_source(id, opts = {})
      delete_source_with_http_info(id, opts)
      nil
    end

    # Delete an existing Source
    # Deletes a Source object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_source_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_source ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.delete_source"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.delete_source, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/sources/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerGroups
    # Returns an array of ContainerGroup objects
    # @param [Hash] opts the optional parameters
    # @return [Array<ContainerGroup>]
    def list_container_groups(opts = {})
      data, _status_code, _headers = list_container_groups_with_http_info(opts)
      data
    end

    # List ContainerGroups
    # Returns an array of ContainerGroup objects
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ContainerGroup>, Fixnum, Hash)>] Array<ContainerGroup> data, response status code and response headers
    def list_container_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_container_groups ...'
      end
      # resource path
      local_var_path = '/container_groups'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ContainerGroup>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_container_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerGroups for ContainerNode
    # Returns an array of ContainerGroup objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<ContainerGroup>]
    def list_container_node_container_groups(id, opts = {})
      data, _status_code, _headers = list_container_node_container_groups_with_http_info(id, opts)
      data
    end

    # List ContainerGroups for ContainerNode
    # Returns an array of ContainerGroup objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ContainerGroup>, Fixnum, Hash)>] Array<ContainerGroup> data, response status code and response headers
    def list_container_node_container_groups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_container_node_container_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_container_node_container_groups"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_container_node_container_groups, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/container_nodes/{id}/container_groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ContainerGroup>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_container_node_container_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerNodes
    # Returns an array of ContainerNode objects
    # @param [Hash] opts the optional parameters
    # @return [Array<ContainerNode>]
    def list_container_nodes(opts = {})
      data, _status_code, _headers = list_container_nodes_with_http_info(opts)
      data
    end

    # List ContainerNodes
    # Returns an array of ContainerNode objects
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ContainerNode>, Fixnum, Hash)>] Array<ContainerNode> data, response status code and response headers
    def list_container_nodes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_container_nodes ...'
      end
      # resource path
      local_var_path = '/container_nodes'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ContainerNode>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_container_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerGroups for ContainerProject
    # Returns an array of ContainerGroup objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<ContainerGroup>]
    def list_container_project_container_groups(id, opts = {})
      data, _status_code, _headers = list_container_project_container_groups_with_http_info(id, opts)
      data
    end

    # List ContainerGroups for ContainerProject
    # Returns an array of ContainerGroup objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ContainerGroup>, Fixnum, Hash)>] Array<ContainerGroup> data, response status code and response headers
    def list_container_project_container_groups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_container_project_container_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_container_project_container_groups"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_container_project_container_groups, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/container_projects/{id}/container_groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ContainerGroup>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_container_project_container_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerTemplates for ContainerProject
    # Returns an array of ContainerTemplate objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<ContainerTemplate>]
    def list_container_project_container_templates(id, opts = {})
      data, _status_code, _headers = list_container_project_container_templates_with_http_info(id, opts)
      data
    end

    # List ContainerTemplates for ContainerProject
    # Returns an array of ContainerTemplate objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ContainerTemplate>, Fixnum, Hash)>] Array<ContainerTemplate> data, response status code and response headers
    def list_container_project_container_templates_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_container_project_container_templates ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_container_project_container_templates"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_container_project_container_templates, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/container_projects/{id}/container_templates'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ContainerTemplate>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_container_project_container_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerProjects
    # Returns an array of ContainerProject objects
    # @param [Hash] opts the optional parameters
    # @return [Array<ContainerProject>]
    def list_container_projects(opts = {})
      data, _status_code, _headers = list_container_projects_with_http_info(opts)
      data
    end

    # List ContainerProjects
    # Returns an array of ContainerProject objects
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ContainerProject>, Fixnum, Hash)>] Array<ContainerProject> data, response status code and response headers
    def list_container_projects_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_container_projects ...'
      end
      # resource path
      local_var_path = '/container_projects'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ContainerProject>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_container_projects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerTemplates
    # Returns an array of ContainerTemplate objects
    # @param [Hash] opts the optional parameters
    # @return [Array<ContainerTemplate>]
    def list_container_templates(opts = {})
      data, _status_code, _headers = list_container_templates_with_http_info(opts)
      data
    end

    # List ContainerTemplates
    # Returns an array of ContainerTemplate objects
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ContainerTemplate>, Fixnum, Hash)>] Array<ContainerTemplate> data, response status code and response headers
    def list_container_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_container_templates ...'
      end
      # resource path
      local_var_path = '/container_templates'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ContainerTemplate>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_container_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Endpoints
    # Returns an array of Endpoint objects
    # @param [Hash] opts the optional parameters
    # @return [Array<Endpoint>]
    def list_endpoints(opts = {})
      data, _status_code, _headers = list_endpoints_with_http_info(opts)
      data
    end

    # List Endpoints
    # Returns an array of Endpoint objects
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Endpoint>, Fixnum, Hash)>] Array<Endpoint> data, response status code and response headers
    def list_endpoints_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_endpoints ...'
      end
      # resource path
      local_var_path = '/endpoints'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Endpoint>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List OrchestrationStacks
    # Returns an array of OrchestrationStack objects
    # @param [Hash] opts the optional parameters
    # @return [Array<OrchestrationStack>]
    def list_orchestration_stacks(opts = {})
      data, _status_code, _headers = list_orchestration_stacks_with_http_info(opts)
      data
    end

    # List OrchestrationStacks
    # Returns an array of OrchestrationStack objects
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrchestrationStack>, Fixnum, Hash)>] Array<OrchestrationStack> data, response status code and response headers
    def list_orchestration_stacks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_orchestration_stacks ...'
      end
      # resource path
      local_var_path = '/orchestration_stacks'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<OrchestrationStack>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_orchestration_stacks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ServiceInstances
    # Returns an array of ServiceInstance objects
    # @param [Hash] opts the optional parameters
    # @return [Array<ServiceInstance>]
    def list_service_instances(opts = {})
      data, _status_code, _headers = list_service_instances_with_http_info(opts)
      data
    end

    # List ServiceInstances
    # Returns an array of ServiceInstance objects
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ServiceInstance>, Fixnum, Hash)>] Array<ServiceInstance> data, response status code and response headers
    def list_service_instances_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_service_instances ...'
      end
      # resource path
      local_var_path = '/service_instances'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ServiceInstance>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_service_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ServiceInstances for ServiceOffering
    # Returns an array of ServiceInstance objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<ServiceInstance>]
    def list_service_offering_service_instances(id, opts = {})
      data, _status_code, _headers = list_service_offering_service_instances_with_http_info(id, opts)
      data
    end

    # List ServiceInstances for ServiceOffering
    # Returns an array of ServiceInstance objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ServiceInstance>, Fixnum, Hash)>] Array<ServiceInstance> data, response status code and response headers
    def list_service_offering_service_instances_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_service_offering_service_instances ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_service_offering_service_instances"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_service_offering_service_instances, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/service_offerings/{id}/service_instances'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ServiceInstance>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_service_offering_service_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ServicePlans for ServiceOffering
    # Returns an array of ServicePlan objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<ServicePlan>]
    def list_service_offering_service_plans(id, opts = {})
      data, _status_code, _headers = list_service_offering_service_plans_with_http_info(id, opts)
      data
    end

    # List ServicePlans for ServiceOffering
    # Returns an array of ServicePlan objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ServicePlan>, Fixnum, Hash)>] Array<ServicePlan> data, response status code and response headers
    def list_service_offering_service_plans_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_service_offering_service_plans ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_service_offering_service_plans"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_service_offering_service_plans, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/service_offerings/{id}/service_plans'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ServicePlan>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_service_offering_service_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ServiceOfferings
    # Returns an array of ServiceOffering objects
    # @param [Hash] opts the optional parameters
    # @return [Array<ServiceOffering>]
    def list_service_offerings(opts = {})
      data, _status_code, _headers = list_service_offerings_with_http_info(opts)
      data
    end

    # List ServiceOfferings
    # Returns an array of ServiceOffering objects
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ServiceOffering>, Fixnum, Hash)>] Array<ServiceOffering> data, response status code and response headers
    def list_service_offerings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_service_offerings ...'
      end
      # resource path
      local_var_path = '/service_offerings'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ServiceOffering>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_service_offerings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ServiceInstances for ServicePlan
    # Returns an array of ServiceInstance objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<ServiceInstance>]
    def list_service_plan_service_instances(id, opts = {})
      data, _status_code, _headers = list_service_plan_service_instances_with_http_info(id, opts)
      data
    end

    # List ServiceInstances for ServicePlan
    # Returns an array of ServiceInstance objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ServiceInstance>, Fixnum, Hash)>] Array<ServiceInstance> data, response status code and response headers
    def list_service_plan_service_instances_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_service_plan_service_instances ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_service_plan_service_instances"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_service_plan_service_instances, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/service_plans/{id}/service_instances'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ServiceInstance>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_service_plan_service_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ServicePlans
    # Returns an array of ServicePlan objects
    # @param [Hash] opts the optional parameters
    # @return [Array<ServicePlan>]
    def list_service_plans(opts = {})
      data, _status_code, _headers = list_service_plans_with_http_info(opts)
      data
    end

    # List ServicePlans
    # Returns an array of ServicePlan objects
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ServicePlan>, Fixnum, Hash)>] Array<ServicePlan> data, response status code and response headers
    def list_service_plans_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_service_plans ...'
      end
      # resource path
      local_var_path = '/service_plans'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ServicePlan>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_service_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerGroups for Source
    # Returns an array of ContainerGroup objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<ContainerGroup>]
    def list_source_container_groups(id, opts = {})
      data, _status_code, _headers = list_source_container_groups_with_http_info(id, opts)
      data
    end

    # List ContainerGroups for Source
    # Returns an array of ContainerGroup objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ContainerGroup>, Fixnum, Hash)>] Array<ContainerGroup> data, response status code and response headers
    def list_source_container_groups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_container_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_container_groups"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_container_groups, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/sources/{id}/container_groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ContainerGroup>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_container_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerNodes for Source
    # Returns an array of ContainerNode objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<ContainerNode>]
    def list_source_container_nodes(id, opts = {})
      data, _status_code, _headers = list_source_container_nodes_with_http_info(id, opts)
      data
    end

    # List ContainerNodes for Source
    # Returns an array of ContainerNode objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ContainerNode>, Fixnum, Hash)>] Array<ContainerNode> data, response status code and response headers
    def list_source_container_nodes_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_container_nodes ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_container_nodes"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_container_nodes, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/sources/{id}/container_nodes'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ContainerNode>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_container_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerProjects for Source
    # Returns an array of ContainerProject objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<ContainerProject>]
    def list_source_container_projects(id, opts = {})
      data, _status_code, _headers = list_source_container_projects_with_http_info(id, opts)
      data
    end

    # List ContainerProjects for Source
    # Returns an array of ContainerProject objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ContainerProject>, Fixnum, Hash)>] Array<ContainerProject> data, response status code and response headers
    def list_source_container_projects_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_container_projects ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_container_projects"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_container_projects, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/sources/{id}/container_projects'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ContainerProject>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_container_projects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ContainerTemplates for Source
    # Returns an array of ContainerTemplate objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<ContainerTemplate>]
    def list_source_container_templates(id, opts = {})
      data, _status_code, _headers = list_source_container_templates_with_http_info(id, opts)
      data
    end

    # List ContainerTemplates for Source
    # Returns an array of ContainerTemplate objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ContainerTemplate>, Fixnum, Hash)>] Array<ContainerTemplate> data, response status code and response headers
    def list_source_container_templates_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_container_templates ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_container_templates"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_container_templates, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/sources/{id}/container_templates'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ContainerTemplate>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_container_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Endpoints for Source
    # Returns an array of Endpoint objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<Endpoint>]
    def list_source_endpoints(id, opts = {})
      data, _status_code, _headers = list_source_endpoints_with_http_info(id, opts)
      data
    end

    # List Endpoints for Source
    # Returns an array of Endpoint objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Endpoint>, Fixnum, Hash)>] Array<Endpoint> data, response status code and response headers
    def list_source_endpoints_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_endpoints ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_endpoints"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_endpoints, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/sources/{id}/endpoints'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Endpoint>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List OrchestrationStacks for Source
    # Returns an array of OrchestrationStack objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<OrchestrationStack>]
    def list_source_orchestration_stacks(id, opts = {})
      data, _status_code, _headers = list_source_orchestration_stacks_with_http_info(id, opts)
      data
    end

    # List OrchestrationStacks for Source
    # Returns an array of OrchestrationStack objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrchestrationStack>, Fixnum, Hash)>] Array<OrchestrationStack> data, response status code and response headers
    def list_source_orchestration_stacks_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_orchestration_stacks ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_orchestration_stacks"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_orchestration_stacks, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/sources/{id}/orchestration_stacks'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<OrchestrationStack>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_orchestration_stacks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ServiceInstances for Source
    # Returns an array of ServiceInstance objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<ServiceInstance>]
    def list_source_service_instances(id, opts = {})
      data, _status_code, _headers = list_source_service_instances_with_http_info(id, opts)
      data
    end

    # List ServiceInstances for Source
    # Returns an array of ServiceInstance objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ServiceInstance>, Fixnum, Hash)>] Array<ServiceInstance> data, response status code and response headers
    def list_source_service_instances_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_service_instances ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_service_instances"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_service_instances, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/sources/{id}/service_instances'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ServiceInstance>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_service_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ServiceOfferings for Source
    # Returns an array of ServiceOffering objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<ServiceOffering>]
    def list_source_service_offerings(id, opts = {})
      data, _status_code, _headers = list_source_service_offerings_with_http_info(id, opts)
      data
    end

    # List ServiceOfferings for Source
    # Returns an array of ServiceOffering objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ServiceOffering>, Fixnum, Hash)>] Array<ServiceOffering> data, response status code and response headers
    def list_source_service_offerings_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_service_offerings ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_service_offerings"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_service_offerings, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/sources/{id}/service_offerings'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ServiceOffering>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_service_offerings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ServicePlans for Source
    # Returns an array of ServicePlan objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<ServicePlan>]
    def list_source_service_plans(id, opts = {})
      data, _status_code, _headers = list_source_service_plans_with_http_info(id, opts)
      data
    end

    # List ServicePlans for Source
    # Returns an array of ServicePlan objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ServicePlan>, Fixnum, Hash)>] Array<ServicePlan> data, response status code and response headers
    def list_source_service_plans_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_service_plans ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_service_plans"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_service_plans, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/sources/{id}/service_plans'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ServicePlan>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_service_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Sources for SourceType
    # Returns an array of Source objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<Source>]
    def list_source_type_sources(id, opts = {})
      data, _status_code, _headers = list_source_type_sources_with_http_info(id, opts)
      data
    end

    # List Sources for SourceType
    # Returns an array of Source objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Source>, Fixnum, Hash)>] Array<Source> data, response status code and response headers
    def list_source_type_sources_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_type_sources ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_type_sources"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_type_sources, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/source_types/{id}/sources'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Source>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_type_sources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List SourceTypes
    # Returns an array of SourceType objects
    # @param [Hash] opts the optional parameters
    # @return [Array<SourceType>]
    def list_source_types(opts = {})
      data, _status_code, _headers = list_source_types_with_http_info(opts)
      data
    end

    # List SourceTypes
    # Returns an array of SourceType objects
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SourceType>, Fixnum, Hash)>] Array<SourceType> data, response status code and response headers
    def list_source_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_types ...'
      end
      # resource path
      local_var_path = '/source_types'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SourceType>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Vms for Source
    # Returns an array of Vm objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<Vm>]
    def list_source_vms(id, opts = {})
      data, _status_code, _headers = list_source_vms_with_http_info(id, opts)
      data
    end

    # List Vms for Source
    # Returns an array of Vm objects
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Vm>, Fixnum, Hash)>] Array<Vm> data, response status code and response headers
    def list_source_vms_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_source_vms ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_source_vms"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.list_source_vms, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/sources/{id}/vms'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Vm>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_source_vms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Sources
    # Returns an array of Source objects
    # @param [Hash] opts the optional parameters
    # @return [Array<Source>]
    def list_sources(opts = {})
      data, _status_code, _headers = list_sources_with_http_info(opts)
      data
    end

    # List Sources
    # Returns an array of Source objects
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Source>, Fixnum, Hash)>] Array<Source> data, response status code and response headers
    def list_sources_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_sources ...'
      end
      # resource path
      local_var_path = '/sources'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Source>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_sources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Tasks
    # Returns an array of Task objects
    # @param [Hash] opts the optional parameters
    # @return [Array<Task>]
    def list_tasks(opts = {})
      data, _status_code, _headers = list_tasks_with_http_info(opts)
      data
    end

    # List Tasks
    # Returns an array of Task objects
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Task>, Fixnum, Hash)>] Array<Task> data, response status code and response headers
    def list_tasks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_tasks ...'
      end
      # resource path
      local_var_path = '/tasks'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Task>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_tasks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Vms
    # Returns an array of Vm objects
    # @param [Hash] opts the optional parameters
    # @return [Array<Vm>]
    def list_vms(opts = {})
      data, _status_code, _headers = list_vms_with_http_info(opts)
      data
    end

    # List Vms
    # Returns an array of Vm objects
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Vm>, Fixnum, Hash)>] Array<Vm> data, response status code and response headers
    def list_vms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_vms ...'
      end
      # resource path
      local_var_path = '/vms'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Vm>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_vms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Order an existing ServicePlan
    # Returns a Task id
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject] :inline_object 
    # @return [InlineResponse200]
    def order_service_plan(id, opts = {})
      data, _status_code, _headers = order_service_plan_with_http_info(id, opts)
      data
    end

    # Order an existing ServicePlan
    # Returns a Task id
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject] :inline_object 
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def order_service_plan_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.order_service_plan ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.order_service_plan"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.order_service_plan, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/service_plans/{id}/order'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'inline_object'])
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#order_service_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace an existing Endpoint
    # Replaces a Endpoint object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def replace_endpoint(id, opts = {})
      replace_endpoint_with_http_info(id, opts)
      nil
    end

    # Replace an existing Endpoint
    # Replaces a Endpoint object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def replace_endpoint_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.replace_endpoint ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.replace_endpoint"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.replace_endpoint, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/endpoints/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#replace_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace an existing Source
    # Replaces a Source object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def replace_source(id, opts = {})
      replace_source_with_http_info(id, opts)
      nil
    end

    # Replace an existing Source
    # Replaces a Source object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def replace_source_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.replace_source ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.replace_source"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.replace_source, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/sources/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#replace_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing ContainerGroup
    # Returns a ContainerGroup object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [ContainerGroup]
    def show_container_group(id, opts = {})
      data, _status_code, _headers = show_container_group_with_http_info(id, opts)
      data
    end

    # Show an existing ContainerGroup
    # Returns a ContainerGroup object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContainerGroup, Fixnum, Hash)>] ContainerGroup data, response status code and response headers
    def show_container_group_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_container_group ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_container_group"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_container_group, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/container_groups/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_container_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing ContainerNode
    # Returns a ContainerNode object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [ContainerNode]
    def show_container_node(id, opts = {})
      data, _status_code, _headers = show_container_node_with_http_info(id, opts)
      data
    end

    # Show an existing ContainerNode
    # Returns a ContainerNode object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContainerNode, Fixnum, Hash)>] ContainerNode data, response status code and response headers
    def show_container_node_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_container_node ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_container_node"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_container_node, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/container_nodes/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_container_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing ContainerProject
    # Returns a ContainerProject object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [ContainerProject]
    def show_container_project(id, opts = {})
      data, _status_code, _headers = show_container_project_with_http_info(id, opts)
      data
    end

    # Show an existing ContainerProject
    # Returns a ContainerProject object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContainerProject, Fixnum, Hash)>] ContainerProject data, response status code and response headers
    def show_container_project_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_container_project ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_container_project"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_container_project, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/container_projects/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerProject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_container_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing ContainerTemplate
    # Returns a ContainerTemplate object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [ContainerTemplate]
    def show_container_template(id, opts = {})
      data, _status_code, _headers = show_container_template_with_http_info(id, opts)
      data
    end

    # Show an existing ContainerTemplate
    # Returns a ContainerTemplate object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContainerTemplate, Fixnum, Hash)>] ContainerTemplate data, response status code and response headers
    def show_container_template_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_container_template ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_container_template"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_container_template, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/container_templates/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerTemplate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_container_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing Endpoint
    # Returns a Endpoint object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Endpoint]
    def show_endpoint(id, opts = {})
      data, _status_code, _headers = show_endpoint_with_http_info(id, opts)
      data
    end

    # Show an existing Endpoint
    # Returns a Endpoint object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Endpoint, Fixnum, Hash)>] Endpoint data, response status code and response headers
    def show_endpoint_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_endpoint ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_endpoint"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_endpoint, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/endpoints/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Endpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing OrchestrationStack
    # Returns an OrchestrationStack object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [OrchestrationStack]
    def show_orchestration_stack(id, opts = {})
      data, _status_code, _headers = show_orchestration_stack_with_http_info(id, opts)
      data
    end

    # Show an existing OrchestrationStack
    # Returns an OrchestrationStack object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrchestrationStack, Fixnum, Hash)>] OrchestrationStack data, response status code and response headers
    def show_orchestration_stack_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_orchestration_stack ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_orchestration_stack"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_orchestration_stack, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/orchestration_stacks/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrchestrationStack')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_orchestration_stack\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing ServiceInstance
    # Returns a ServiceInstance object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [ServiceInstance]
    def show_service_instance(id, opts = {})
      data, _status_code, _headers = show_service_instance_with_http_info(id, opts)
      data
    end

    # Show an existing ServiceInstance
    # Returns a ServiceInstance object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInstance, Fixnum, Hash)>] ServiceInstance data, response status code and response headers
    def show_service_instance_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_service_instance ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_service_instance"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_service_instance, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/service_instances/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing ServiceOffering
    # Returns a ServiceOffering object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [ServiceOffering]
    def show_service_offering(id, opts = {})
      data, _status_code, _headers = show_service_offering_with_http_info(id, opts)
      data
    end

    # Show an existing ServiceOffering
    # Returns a ServiceOffering object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceOffering, Fixnum, Hash)>] ServiceOffering data, response status code and response headers
    def show_service_offering_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_service_offering ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_service_offering"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_service_offering, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/service_offerings/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceOffering')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_service_offering\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing ServicePlan
    # Returns a ServicePlan object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [ServicePlan]
    def show_service_plan(id, opts = {})
      data, _status_code, _headers = show_service_plan_with_http_info(id, opts)
      data
    end

    # Show an existing ServicePlan
    # Returns a ServicePlan object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServicePlan, Fixnum, Hash)>] ServicePlan data, response status code and response headers
    def show_service_plan_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_service_plan ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_service_plan"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_service_plan, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/service_plans/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServicePlan')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_service_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing Source
    # Returns a Source object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Source]
    def show_source(id, opts = {})
      data, _status_code, _headers = show_source_with_http_info(id, opts)
      data
    end

    # Show an existing Source
    # Returns a Source object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Source, Fixnum, Hash)>] Source data, response status code and response headers
    def show_source_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_source ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_source"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_source, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/sources/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Source')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing SourceType
    # Returns a SourceType object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [SourceType]
    def show_source_type(id, opts = {})
      data, _status_code, _headers = show_source_type_with_http_info(id, opts)
      data
    end

    # Show an existing SourceType
    # Returns a SourceType object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(SourceType, Fixnum, Hash)>] SourceType data, response status code and response headers
    def show_source_type_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_source_type ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_source_type"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_source_type, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/source_types/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SourceType')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_source_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing Task
    # Returns a Task object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Task]
    def show_task(id, opts = {})
      data, _status_code, _headers = show_task_with_http_info(id, opts)
      data
    end

    # Show an existing Task
    # Returns a Task object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Task, Fixnum, Hash)>] Task data, response status code and response headers
    def show_task_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_task ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_task"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_task, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/tasks/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Task')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing Vm
    # Returns a Vm object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Vm]
    def show_vm(id, opts = {})
      data, _status_code, _headers = show_vm_with_http_info(id, opts)
      data
    end

    # Show an existing Vm
    # Returns a Vm object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Vm, Fixnum, Hash)>] Vm data, response status code and response headers
    def show_vm_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.show_vm ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.show_vm"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.show_vm, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/vms/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Vm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#show_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing Endpoint
    # Updates a Endpoint object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_endpoint(id, opts = {})
      update_endpoint_with_http_info(id, opts)
      nil
    end

    # Update an existing Endpoint
    # Updates a Endpoint object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_endpoint_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_endpoint ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_endpoint"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.update_endpoint, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/endpoints/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing Source
    # Updates a Source object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_source(id, opts = {})
      update_source_with_http_info(id, opts)
      nil
    end

    # Update an existing Source
    # Updates a Source object
    # @param id ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_source_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_source ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_source"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\A\d+\z/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.update_source, must conform to the pattern /\A\d+\z/."
      end

      # resource path
      local_var_path = '/sources/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
